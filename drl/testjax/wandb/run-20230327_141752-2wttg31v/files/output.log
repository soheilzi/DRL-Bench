Epoch:  0 Test Accuracy:  0.9191
Epoch:  0 Train Accuracy:  0.9375
Epoch:  1 Test Accuracy:  0.9428
Epoch:  1 Train Accuracy:  0.96875
Epoch:  2 Test Accuracy:  0.9511
Epoch:  2 Train Accuracy:  1.0
Epoch:  3 Test Accuracy:  0.954
Epoch:  3 Train Accuracy:  0.9375
Epoch:  4 Test Accuracy:  0.951
Epoch:  4 Train Accuracy:  0.90625
Epoch:  5 Test Accuracy:  0.9615
Epoch:  5 Train Accuracy:  1.0
Traceback (most recent call last):
  File "/home/soheil/DRL-Bench/drl/testjax/mnist-test.py", line 118, in <module>
    grads = jax.grad(loss)(params, batch, batch_labels)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/traceback_util.py", line 166, in reraise_with_filtered_traceback
    return fun(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/api.py", line 1179, in grad_f
    _, g = value_and_grad_f(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/traceback_util.py", line 166, in reraise_with_filtered_traceback
    return fun(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/api.py", line 1255, in value_and_grad_f
    ans, vjp_py = _vjp(f_partial, *dyn_args, reduce_axes=reduce_axes)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/api.py", line 2804, in _vjp
    out_primal, out_vjp = ad.vjp(
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/interpreters/ad.py", line 139, in vjp
    out_primals, pvals, jaxpr, consts = linearize(traceable, *primals)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/interpreters/ad.py", line 128, in linearize
    jaxpr, out_pvals, consts = pe.trace_to_jaxpr_nounits(jvpfun_flat, in_pvals)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/profiler.py", line 314, in wrapper
    return func(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/interpreters/partial_eval.py", line 772, in trace_to_jaxpr_nounits
    jaxpr, (out_pvals, consts, env) = fun.call_wrapped(pvals)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/linear_util.py", line 165, in call_wrapped
    ans = self.f(*args, **dict(self.params, **kwargs))
  File "/home/soheil/DRL-Bench/drl/testjax/mnist-test.py", line 85, in loss
    y_pred = smodel.apply(params, x)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/multi_transform.py", line 298, in apply_fn
    return f.apply(params, None, *args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/transform.py", line 128, in apply_fn
    out, state = f.apply(params, {}, *args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/transform.py", line 357, in apply_fn
    out = f(*args, **kwargs)
  File "/home/soheil/DRL-Bench/drl/testjax/mnist-test.py", line 75, in simple_model
    return mlp(x)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/module.py", line 426, in wrapped
    out = f(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/contextlib.py", line 79, in inner
    return func(*args, **kwds)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/module.py", line 272, in run_interceptors
    return bound_method(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/basic.py", line 125, in __call__
    out = layer(out)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/nn/functions.py", line 346, in softmax
    x_max = jnp.max(x, axis, where=where, initial=initial, keepdims=True)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/numpy/reductions.py", line 259, in max
    return _reduce_max(a, axis=_ensure_optional_axes(axis), out=out,
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/traceback_util.py", line 166, in reraise_with_filtered_traceback
    return fun(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/pjit.py", line 235, in cache_miss
    outs, out_flat, out_tree, args_flat = _python_pjit_helper(
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/pjit.py", line 184, in _python_pjit_helper
    out_flat = pjit_p.bind(*args_flat, **params)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/core.py", line 2577, in bind
    return self.bind_with_trace(top_trace, args, params)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/core.py", line 363, in bind_with_trace
    out = trace.process_primitive(self, map(trace.full_raise, args), params)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/interpreters/ad.py", line 315, in process_primitive
    primal_out, tangent_out = jvp(primals_in, tangents_in, **params)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/pjit.py", line 1584, in _pjit_jvp
    outputs = pjit_p.bind(
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/core.py", line 2577, in bind
    return self.bind_with_trace(top_trace, args, params)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/core.py", line 363, in bind_with_trace
    out = trace.process_primitive(self, map(trace.full_raise, args), params)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/interpreters/partial_eval.py", line 212, in process_primitive
    return custom_partial_eval_rules[primitive](self, *tracers, **params)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/pjit.py", line 1715, in _pjit_partial_eval
    residual_tracers = [trace.new_instantiated_const(residual) for residual in residual_vals]
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/pjit.py", line 1715, in <listcomp>
    residual_tracers = [trace.new_instantiated_const(residual) for residual in residual_vals]
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/interpreters/partial_eval.py", line 167, in new_instantiated_const
    aval = get_aval(val)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/core.py", line 1348, in get_aval
    return concrete_aval(x)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/core.py", line 1337, in concrete_aval
    if handler: return handler(x)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/abstract_arrays.py", line 53, in canonical_concrete_aval
    return ConcreteArray(dtypes.canonicalize_dtype(np.result_type(val)), val,
  File "<__array_function__ internals>", line 200, in result_type
jax._src.traceback_util.UnfilteredStackTrace: TypeError: Cannot interpret 'Array([[0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.]], dtype=float32)' as a data type
The stack trace below excludes JAX-internal frames.
The preceding is the original exception that occurred, unmodified.
--------------------
The above exception was the direct cause of the following exception:
Traceback (most recent call last):
  File "/home/soheil/DRL-Bench/drl/testjax/mnist-test.py", line 118, in <module>
    grads = jax.grad(loss)(params, batch, batch_labels)
  File "/home/soheil/DRL-Bench/drl/testjax/mnist-test.py", line 85, in loss
    y_pred = smodel.apply(params, x)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/multi_transform.py", line 298, in apply_fn
    return f.apply(params, None, *args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/transform.py", line 128, in apply_fn
    out, state = f.apply(params, {}, *args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/transform.py", line 357, in apply_fn
    out = f(*args, **kwargs)
  File "/home/soheil/DRL-Bench/drl/testjax/mnist-test.py", line 75, in simple_model
    return mlp(x)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/module.py", line 426, in wrapped
    out = f(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/contextlib.py", line 79, in inner
    return func(*args, **kwds)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/module.py", line 272, in run_interceptors
    return bound_method(*args, **kwargs)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/haiku/_src/basic.py", line 125, in __call__
    out = layer(out)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/nn/functions.py", line 346, in softmax
    x_max = jnp.max(x, axis, where=where, initial=initial, keepdims=True)
  File "/home/soheil/miniconda3/envs/bench/lib/python3.10/site-packages/jax/_src/numpy/reductions.py", line 259, in max
    return _reduce_max(a, axis=_ensure_optional_axes(axis), out=out,
  File "<__array_function__ internals>", line 200, in result_type
TypeError: Cannot interpret 'Array([[0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.]], dtype=float32)' as a data type